// 객체
  - 여러가지 자료를 다루게 하는 자료형
  - 만드는 방법
    const object = {
      key : value,
      key : value,
      key : value,
      key : value
    }
    key는 식별자를 사용(* 식별자는 숫자로 시작하지 않고 기호는 $와 _만 포함)

// 속성과 메서드
  const dog = {
    name: 'jim',
    age: 3,
    bark: function () { }
  }
  - 속성(property) : 명사적 특징(name, age)
  - 메서드(method) : 동사적 특징(bark)
  
// this 키워드
  - 익명 함수에서는 메서드 내부에서 this를 사용할 경우 자기 자신을 나타냄
  - 화살표 함수에서는 안 됨
  - 객체 자신을 나타낼 때 this. 생략 불가능
  정리 
    -> 익명 함수 : this 바인딩을 한다
    -> 화살표 함수 : this 바인딩을 안 한다
      *this 바인딩 : this를 현재 객체와 연결하는 행위*
    -> 따라서 객체 내부에서 this를 활용할 경우 화살표 함수 사용 ㄴㄴ

// 객체에 동적으로 속성 추가하기
  - (객체).(추가할 속성) = (value)

// 객체에 동적으로 속성 제거하기
  - delete (객체).(제거할 속성)

// 기본 자료형 -> stack에 값을 저장
  - 숫자
  - 문자열
  - bool
  - 속성과 메서드 소유 불가

// 객체 자료형 -> stack과 heap 연결
  - 함수
  - 배열
  - 객체
  - 속성과 메서드 소유 가능

// 기본 자료형을 객체 자료형으로 선언하기
  const 객체 = new 객체 자료형 이름()
  ex)
    const a = new Number(10)
    typeof(a) -> "object"

    const b = new String('string')
    typeof(b) -> "object"

    const c = new Boolean(true)
    typeof(c) -> "object"

// 프로토타입을 활용한 속성과 메서드 추가
  - prototype -> 기본 자료형에 원하는 추가 메서드를 집어넣고자 할 때 사용